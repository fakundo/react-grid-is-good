{"version":3,"sources":["Span.js"],"names":["Span","context","grid","name","getGridProps","breakpoint","props","gridProps","pull","calcSize","getSpanPropValue","push","offset","gutter","getGridPropValue","align","valign","width","position","minHeight","boxSizing","paddingLeft","paddingRight","textAlign","left","marginLeft","maxWidth","top","middle","bottom","MsFlexItemAlign","size","gridSize","className","children","getStyles","propTypes","any","break","bool","oneOf","defaultProps","contextTypes","object"],"mappings":"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","file":"Span.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPropValue, applyPrefixes, calcSize } from './utils';\n\nexport default class Span extends Component {\n\n  static propTypes = {\n    className: PropTypes.any,\n    children: PropTypes.any,\n    size: PropTypes.any,\n    pull: PropTypes.any,\n    push: PropTypes.any,\n    offset: PropTypes.any,\n    break: PropTypes.bool,\n    align: PropTypes.oneOf(['left', 'center', 'right']),\n    valign: PropTypes.oneOf(['top', 'middle', 'bottom'])\n  };\n\n  static defaultProps = {\n    size: 1,\n    pull: 0,\n    push: 0,\n    offset: 0,\n    break: false\n  };\n\n  static contextTypes = {\n    grid: PropTypes.object\n  };\n\n  getGridProps() {\n    return this.context.grid;\n  }\n\n  getSpanPropValue(name) {\n    const { breakpoint } = this.getGridProps();\n    return getPropValue(name, breakpoint, this.props);\n  }\n\n  getGridPropValue(name) {\n    const gridProps = this.getGridProps();\n    const { breakpoint } = gridProps;\n    return getPropValue(name, breakpoint, gridProps);\n  }\n\n  getStyles() {\n    const pull = this.calcSize(this.getSpanPropValue('pull'));\n    const push = this.calcSize(this.getSpanPropValue('push'));\n    const offset = this.calcSize(this.getSpanPropValue('offset'));\n    const gutter = this.getGridPropValue('gutter');\n    const align = this.getSpanPropValue('align') || this.getGridPropValue('align');\n    const valign = this.getSpanPropValue('valign');\n    const width = this.calcSize(this.getSpanPropValue('size'));\n\n    return {\n      position: 'relative',\n      minHeight: '1px', // Prevent collapsing\n      boxSizing: 'border-box',\n      paddingLeft: gutter / 2,\n      paddingRight: gutter / 2,\n      textAlign: align,\n      left: pull !== '0%' ? `-${pull}` : (push !== '0%' ? push : ''),\n      marginLeft: offset,\n      // Flex styles\n      // Prevent columns from becoming too narrow when at smaller grid tiers by\n      // always setting `width: 100%;`. This works because we use `flex` values\n      // later on to override this initial width.\n      width: '100%',\n      ...applyPrefixes('Flex', `0 0 ${width}`),\n      // Add a `max-width` to ensure content within each column does not blow out\n      // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n      // do not appear to require this.\n      maxWidth: width,\n      // Vertical align\n      ...(valign ? {\n        ...applyPrefixes('AlignSelf', ({\n          top: 'flex-start',\n          middle: 'center',\n          bottom: 'flex-end'\n        }[valign])),\n        MsFlexItemAlign: ({\n          top: 'start',\n          middle: 'center',\n          bottom: 'end'\n        }[valign])\n      } : {})\n    };\n  }\n\n  calcSize(size) {\n    const gridSize = this.getGridPropValue('size');\n    return calcSize(size, gridSize);\n  }\n\n  render() {\n    const { className, children } = this.props;\n    return (\n      <div\n        className={className}\n        style={this.getStyles()}\n      >\n        { children }\n      </div>\n    );\n  }\n\n}\n"]}